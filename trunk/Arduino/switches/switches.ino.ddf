#include <SPI.h>
#include <PinChangeInt.h> // necessary otherwise we get undefined reference errors.
#include <AdaEncoder.h>
#include <AdvButton.h>
#include <ButtonManager.h>


#define NAV1 53 //ss
#define STRLEN 20

char buffer[STRLEN];
int  bufferIndex = 0;
#define NAV1 1
#define NAV2 0
#define COM1 3
#define COM2 2

#define ADF1 0
#define ADF2 1
#define TRANSPONDER 2
#define DME1 3
#define DME1TIME 4
#define DME2 5
#define DME2TIME 6

#define OBS1 0
#define OBS2 1
#define ALTITUDE 0
#define VERTICAL 1

#define BANK1CONTROL 0
#define BANK2CONTROL 1
#define ADFCONTROL 2
#define OBSCONTROL 3
#define APCONTROL 4


#define BANK1MASTER 53
#define BANK1SLAVE 49
#define BANK2MASTER 48
#define BANK2SLAVE 47
#define ADF 46
#define OBS 45
#define ALTITUDE_PIN 44
#define HEADING_PIN 43

char* radio_master[4] = {
  "1111",  "2222", "3333", "4444"};
char* radio_slave[4] = {
  "5555",  "6666", "7777", "8888"};
char* adf[7] = {
  "0111",  "0222", "7333", "0444", "0555","0666", "0777"};
char* obs[2] = {
  "0300",  "0400"};
char* autopilot_altitude[2] = {
  "0001",  "0002"};
char* heading = "v000";
int active_bank_one=COM1;
int active_bank_two=NAV1;
int active_ADF = ADF1;
int active_obs = OBS1;
int active_altitude = ALTITUDE;

int8_t clicks=0;
char rotary_id=0;
encoder *thisEncoder;

AdvButton park=AdvButton(4, "parkingb", NULL, single_button_on, single_button_off, btn_Digital);
AdvButton swap_bank_one_button=AdvButton(3, "swapbank1", swap_bank1, btn_Digital);
AdvButton swap_bank_to_button=AdvButton(2, "swapbank2", swap_bank2, btn_Digital);

AdvButton bank1com1=AdvButton(BANK1CONTROL, "mas3", NULL, select_bank1, NULL, btn_Analog, 0, 200);
AdvButton bank1com2=AdvButton(BANK1CONTROL, "mas2", NULL, select_bank1, NULL, btn_Analog, 200, 400);
AdvButton bank1nab1=AdvButton(BANK1CONTROL, "mas1", NULL, select_bank1, NULL, btn_Analog, 400, 600);
AdvButton bank1nab2=AdvButton(BANK1CONTROL, "mas0", NULL, select_bank1, NULL, btn_Analog, 600, 800);

AdvButton bank_to_come1=AdvButton(BANK2CONTROL, "mas3", NULL, select_bank2, NULL, btn_Analog, 0, 200);
AdvButton bank_to_commit_to=AdvButton(BANK2CONTROL, "mas2", NULL, select_bank2, NULL, btn_Analog, 200, 400);
AdvButton bank2nav1=AdvButton(BANK2CONTROL, "mas1", NULL, select_bank2, NULL, btn_Analog, 400, 600);
AdvButton bank2nav2=AdvButton(BANK2CONTROL, "mas0", NULL, select_bank2, NULL, btn_Analog, 600, 800);

AdvButton adfadf1=AdvButton(ADFCONTROL, "adf0", NULL, select_adf, NULL, btn_Analog, 0, 140);
AdvButton adfadf2=AdvButton(ADFCONTROL, "adf1", NULL, select_adf, NULL, btn_Analog, 140, 280);
AdvButton adfadf3=AdvButton(ADFCONTROL, "adf2", NULL, select_adf, NULL, btn_Analog, 280, 420);
AdvButton adfadf4=AdvButton(ADFCONTROL, "adf3", NULL, select_adf, NULL, btn_Analog, 420, 560);
AdvButton adfadf5=AdvButton(ADFCONTROL, "adf4", NULL, select_adf, NULL, btn_Analog, 560, 700);
AdvButton adfadf6=AdvButton(ADFCONTROL, "adf5", NULL, select_adf, NULL, btn_Analog, 700, 840);
AdvButton adfadf7=AdvButton(ADFCONTROL, "adf6", NULL, select_adf, NULL, btn_Analog, 840, 980);

AdvButton obs1=AdvButton(OBSCONTROL, "obs0", NULL, select_obs, NULL, btn_Analog, 0, 400);
AdvButton obs2=AdvButton(OBSCONTROL, "obs1", NULL, select_obs, NULL, btn_Analog, 400, 800);

AdvButton alt=AdvButton(APCONTROL, "alt0", NULL, select_altitude, NULL, btn_Analog, 0, 400);
AdvButton vspd=AdvButton(APCONTROL, "vsp1", NULL, select_altitude, NULL, btn_Analog, 400, 800);
void setup()
{
  Serial.begin(115200);
  Serial.flush();
  pinMode (13, OUTPUT);
  pinMode (BANK1MASTER,OUTPUT);
  pinMode (BANK1SLAVE,OUTPUT);
  pinMode (ADF,OUTPUT);
  pinMode (OBS,OUTPUT);
  pinMode (HEADING_PIN,OUTPUT);
  pinMode (ALTITUDE_PIN,OUTPUT);
  SPI.begin(); 
  SPI.setDataMode(SPI_MODE0);
  SPI.setClockDivider(SPI_CLOCK_DIV32);
  reset7seg(BANK1MASTER);
  reset7seg(BANK1SLAVE);
  reset7seg(BANK2MASTER);
  reset7seg(BANK2SLAVE);  
  reset7seg(ADF);
  reset7seg(OBS);
  reset7seg(HEADING_PIN);
  reset7seg(ALTITUDE_PIN);

  write_led_decimals(BANK1MASTER,0x2);
  write_led_decimals(BANK1SLAVE,0x2);
  write_led_decimals(ADF,0x2);
  //write_led_numbers(NAV1, 0x78,0x78,0x78,0x78); //Blank display
  write_led_numbers(ADF,1,2,3,4);
  AdaEncoder::addEncoder('1', 10, 11);
  AdaEncoder::addEncoder('2', 32, 33); 
  AdaEncoder::addEncoder('h', 32, 33); 
  AdaEncoder::addEncoder('o', 32, 33);   
  AdaEncoder::addEncoder('p', 28, 29);     
  AdaEncoder::addEncoder('a', 26, 27);     
}

void loop()
{
  if( Serial.available())
  {
    char ch = Serial.read();
    if( ch == '\n')  // is this the terminating carriage return
    {
      buffer[ bufferIndex ] = 0; // terminate the strin
      bufferIndex = 0;  // reset the index ready for another string
      parse_string(buffer);
      // do something with the string
    }
    else
      buffer[ bufferIndex++ ] = ch; // add the character into the buffer
  }
  ButtonManager::instance()->checkButtons();  
  check_input();
  thisEncoder= NULL;
  thisEncoder=AdaEncoder::genie(&clicks, &rotary_id);
  if (thisEncoder != NULL) {

    send_rotary (clicks, rotary_id);
  }

} 

void send_init()
{
  Serial.write ("init\n");
}

void parse_string (char* buffer)
{
  char *name = NULL, *value = NULL;
  //Serial.write(buffer);
  name =strtok (buffer, ":");
  value =strtok( NULL, ":");
  if (name && value) {
    handle_command (name, value);
  }
}

void update_display (int num)
{
  if (num == 0 || num == 1)
  {
    write_string (BANK1SLAVE, radio_slave [active_bank_one]);
    write_string (BANK1MASTER, radio_master [active_bank_one]);
    write_string (BANK2MASTER, radio_master [active_bank_two]);
    write_string (BANK2SLAVE, radio_slave [active_bank_two]);
  }

  else if (num == 2)
  {
    write_string (ADF, adf [active_ADF]);
  }

  else if (num == 3)
  {
    write_string (OBS, obs [active_obs]);

  }

  else if (num == 4)
  {
    write_string (ALTITUDE_PIN, autopilot_altitude [active_altitude]);

  }

  else if (num == 5)
  {
    write_string (HEADING_PIN, heading);

  }



}


void my_copy (char* target,char* source,int len)
{
  for(int i=0; i<len;i++){
    target [i] =source [i];
  }
}

void handle_command (char* name,char* value)
{
  if(strcmp(name, "resend")== 0)
  {
    send_init();
    ButtonManager::instance()->triggerAll();
  }
  if (strcmp( name, "nav1m")== 0)  {
    my_copy(radio_master[NAV1], value,4);
    update_display (1);
    //write_string (NAV1, value);
  }
  if (strcmp( name, "nav2m")== 0)
  {
    my_copy(radio_master[NAV2], value,4);
    update_display (1);
  }
  if (strcmp( name, "com1m")== 0)
  {
    my_copy(radio_master[COM1], value,4);
    Serial.print(radio_master[COM1]);
    Serial.print("\n");

    update_display (0);
  }
  if (strcmp( name, "com2m")== 0)
  {
    my_copy(radio_master[COM2], value,4);
    update_display (0);
  }
  if (strcmp( name, "nav1s")== 0)
  {
    my_copy(radio_slave[NAV1], value,4);
    update_display (1);
    //write_string (NAV1,  value, 4);
  }
  if (strcmp( name, "nav2s")== 0)
  {
    my_copy(radio_slave[NAV2],  value, 4);
    update_display (1);
  }
  if (strcmp( name, "com1s")== 0)
  {
    my_copy(radio_slave[COM1],  value, 4);
    update_display (0);
  }
  if (strcmp( name, "com2s")== 0)
  {
    my_copy(radio_slave[COM2],  value, 4);
    update_display (0);
  }
  if (strcmp( name, "adf1")== 0)
  {
    my_copy(adf[ADF1],  value, 4);
    update_display (2);
  }
  if (strcmp( name, "adf2")== 0)
  {
    my_copy(adf[ADF2],  value, 4);
    update_display (2);
  }
  if (strcmp( name, "trans")== 0)
  {
    my_copy(adf[TRANSPONDER],  value, 4);
    update_display (2);
  }
  if (strcmp( name, "dme1")== 0)
  {
    my_copy(adf[DME1],  value, 4);
    update_display (2);
  }
  if (strcmp( name, "dme2")== 0)
  {
    my_copy(adf[DME2],  value, 4);
    update_display (2);
  }
  if (strcmp( name, "dme1time")== 0)
  {
    my_copy(adf[DME1TIME],  value, 4);
    update_display (2);
  }
  if (strcmp( name, "dme2time")== 0)
  {
    my_copy(adf[DME2TIME],  value, 4);
    update_display (2);
  }
  if (strcmp( name, "obs1")== 0)
  {
    my_copy(obs[OBS1],  value, 4);
    update_display (3);
  }
  if (strcmp( name, "obs2")== 0)
  {
    my_copy(obs[OBS2],  value, 4);
    update_display (3);
  }
  if (strcmp( name, "altitude")== 0)
  {
    my_copy(autopilot_altitude[ALTITUDE],  value, 4);
    update_display (4);
  }
  if (strcmp( name, "vertical")== 0)
  {
    my_copy(autopilot_altitude[VERTICAL],  value, 4);
    update_display (4);
  }
  if (strcmp( name, "heading")== 0)
  {
    my_copy(heading,  value, 4);
    update_display (5);
  }
}

void send_value ( char* name,int value)
{
  char buffer [20];
  sprintf (buffer, "%s:%x\n", name, value);
  Serial.write (buffer);
}

void send_string (char* name,char* value)
{
  char buffer [20];
  sprintf (buffer, "%s:%s\n", name, value);
  Serial.write (buffer);
}
void send_rotary(int val, char name)
{
  char buffer[20];
  if (name == '1')
  {
    if (active_bank_one == NAV1)
    {
      sprintf(buffer, "nav1s:%d\n" , val); 
    }

    else if (active_bank_one == NAV2)
    {
      sprintf(buffer, "nav2s:%d\n" , val); 
    }
    else if (active_bank_one == COM1)
    {
      sprintf(buffer, "com1s:%d\n" , val); 
    }
    else if (active_bank_one == COM2)
    {
      sprintf(buffer, "com2s:%d\n" , val); 
    }
  }
  else if (name == '2')
  {
    if (active_bank_two == NAV1)
    {
      sprintf(buffer, "nav1s:%d\n" , val); 
    }

    else if (active_bank_two == NAV2)
    {
      sprintf(buffer, "nav2s:%d\n" , val); 
    }
    else if (active_bank_two == COM1)
    {
      sprintf(buffer, "com1s:%d\n" , val); 
    }
    else if (active_bank_two == COM2)
    {
      sprintf(buffer, "com2s:%d\n" , val); 
    }
  }

  else if (name == 'h')
  {
    sprintf(buffer, "heading:%d\n" , val); 
  }

  else if (name == 'o')
  {
    if (active_obs == OBS1)
    {
      sprintf(buffer, "obs1:%d\n" , val); 
    }

    else if (active_obs == OBS2)
    {
      sprintf(buffer, "obs2:%d\n" , val); 
    }
  }
  else if (name == 'p')
  {
    if (active_altitude == ALTITUDE)
    {
      sprintf(buffer, "altitude:%d\n" , val); 
    }

    else if (active_altitude == VERTICAL)
    {
      sprintf(buffer, "vertical:%d\n" , val ); 
    }
  }

  else if (name == 'a')
  {
    if (active_ADF == ADF1)
    {
      sprintf(buffer, "adf1:%d\n",  val); 
    }

    else if (active_ADF == ADF2)
    {
      sprintf(buffer, "adf2:%d\n" , val); 
    }

    else if (active_ADF == TRANSPONDER)
    {
      sprintf(buffer, "trans:%d\n" , val); 
    }
  }
  Serial.write(buffer); 
}


void send_hex( char* name, int val, int len)
{
  char buffer[20];
  if (len == 1)
  {
    sprintf(buffer, "%s:%x\n" , name, val); 

  }

  else if (len == 2)
  {
    sprintf(buffer, "%s:%02x\n" ,name, val); 

  }

  else if (len == 3)
  {
    sprintf(buffer, "%s:%03x\n" ,name, val); 
  }

  else if (len == 4)
  {
    sprintf(buffer, "%s:%04x\n" ,name, val); 
  }
  Serial.write(buffer); 
}

void check_input ()
{
}

void single_button_on(AdvButton *but)
{
  send_value(but->getName(), 1);
}

void single_button_off(AdvButton *but)
{
  send_value(but->getName(), 0);
}

void lights_on(AdvButton *but)
{
  but->setBit();
  send_hex (but->getName(), but->getBytes(), 2);
}

void swap_bank1(AdvButton* but)
{
  int  beats = 1 << active_bank_one; 
  send_hex("swap" , beats, 1);
}

void swap_bank2(AdvButton* but)
{
  int  beats = 1 << active_bank_two; 
  send_hex("swap" , beats, 1);
}

void lights_off(AdvButton *but)
{
  but->clearBit();
  send_value (but->getName(), but->getBytes());
}

void select_bank1(AdvButton *but)
{
  active_bank_one= atoi(&but->getName()[3]);
  update_display(0); 
}

void select_bank2(AdvButton *but)
{
  active_bank_two= atoi(&but->getName()[3]);
  update_display(1); 
}

void select_adf(AdvButton *but)
{
  active_ADF = atoi(&but->getName()[3]);
  update_display(2); 
}

void select_obs(AdvButton *but)
{
  active_obs = atoi(&but->getName()[3]);
  update_display(3); 
}

void select_altitude (AdvButton *but)
{
  active_altitude = atoi(&but->getName()[3]);
  update_display(4); 
}

void write_led_decimals(int display, int value)
{
  digitalWrite (display, LOW);
  delay(10);
  SPI.transfer(0x77);     // Decimal Point OpCode
  SPI.transfer(value);    // Decimal Point Values
  digitalWrite (display, HIGH); //release chip, signal end transfer
}

void reset7seg(int display)
{
  digitalWrite (display, LOW);
  delay(10);
  SPI.transfer(0x76);    // Decimal Point Values
  //SPI.transfer(0x0);
  digitalWrite (display, HIGH); //release chip, signal end transfer
}

void write_string (int display,char*  s) {
  write_led_numbers(display,(s [0]),(s [1]),(s [2]),(s [3]));
}  

void write_led_numbers(int display, char digit1, char digit2, char digit3, char digit4)
{
  digitalWrite (display, LOW);
  delay(10);
  SPI.transfer(digit1);    // Thousands Digit
  delay(10);
  SPI.transfer(digit2);    // Hundreds Digit
  delay(10);
  SPI.transfer(digit3);    // Tens Digit
  delay(10);
  SPI.transfer(digit4);    // Ones Digit
  digitalWrite (display, HIGH); //release chip, signal end transfer

}
void write_led(int display, unsigned short num, unsigned short base, unsigned short pad)
{
  unsigned short digit[4] = { 
    0, ' ', ' ', ' '                           };
  unsigned short place = 0;

  if ( (base<2) || (base>16) || (num>(base*base*base*base-1)) ) {
    write_led_numbers(display,' ', 0x00, 0x0f, ' ');  // indicate overflow
  } 
  else {
    while ( (num || pad) && (place<4) ) {
      if ( (num>0)  || pad )
        digit[place++] = num % base;
      num /= base;
    }
    write_led_numbers(display, digit[3], digit[2], digit[1], digit[0]);
  }
}









